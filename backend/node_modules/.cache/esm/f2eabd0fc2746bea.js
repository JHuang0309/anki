let fs,express,cors,InputError,AccessError,save,reset,assertValidUserId,assertAdminUserId,getUserIdFromAuthorization,getUserIdFromEmail,login,logout,register,userGet,userAdminChange,userUpdate,getDecks,setDecks,createDeck,deleteDeck,getCards,createCard,getCard,updateCard,deleteCard;_c27‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_c27‍.w("express",[["default",["express"],function(v){express=v}]]);_c27‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_c27‍.w("./error",[["InputError",["InputError"],function(v){InputError=v}],["AccessError",["AccessError"],function(v){AccessError=v}]]);_c27‍.w("./service",[["save",["save"],function(v){save=v}],["reset",["reset"],function(v){reset=v}],["assertValidUserId",["assertValidUserId"],function(v){assertValidUserId=v}],["assertAdminUserId",["assertAdminUserId"],function(v){assertAdminUserId=v}],["getUserIdFromAuthorization",["getUserIdFromAuthorization"],function(v){getUserIdFromAuthorization=v}],["getUserIdFromEmail",["getUserIdFromEmail"],function(v){getUserIdFromEmail=v}],["login",["login"],function(v){login=v}],["logout",["logout"],function(v){logout=v}],["register",["register"],function(v){register=v}],["userGet",["userGet"],function(v){userGet=v}],["userAdminChange",["userAdminChange"],function(v){userAdminChange=v}],["userUpdate",["userUpdate"],function(v){userUpdate=v}],["getDecks",["getDecks"],function(v){getDecks=v}],["setDecks",["setDecks"],function(v){setDecks=v}],["createDeck",["createDeck"],function(v){createDeck=v}],["deleteDeck",["deleteDeck"],function(v){deleteDeck=v}],["getCards",["getCards"],function(v){getCards=v}],["createCard",["createCard"],function(v){createCard=v}],["getCard",["getCard"],function(v){getCard=v}],["updateCard",["updateCard"],function(v){updateCard=v}],["deleteCard",["deleteCard"],function(v){deleteCard=v}]]);/**************************************************************************************/
/**********  SERVER FUNCIONTALITY FILE  **********************************************
*      
*      File to manage requests made to the server 
*
/*************************************************************************************/


// import swaggerUi from 'swagger-ui-express';



























const app = express()

app.use(cors()); //  allow any incoming HTTP requests from any origin to access the server's resources
app.use(express.urlencoded({ extended: true, }));
app.use(express.json({ limit: '500mb', }));

// function wrapper that performs HTTP requests and catches any errors and manages asynchronous behaviour
const performRequest = fn => async (req, res) => {
    try {
      await fn(req, res);
      save();
    } catch (err) {
      if (err instanceof InputError) {
        res.status(400).send({ error: err.message, });
      } else if (err instanceof AccessError) {
        res.status(403).send({ error: err.message, });
      } else {
        _c27‍.g.console.log(err);
        res.status(500).send({ error: 'A system error ocurred', });
      }
    }
  };

/***************************************************************
                       Auth Functions
***************************************************************/

const authed = (fn) => async (req, res) => {
    const userId = getUserIdFromAuthorization(req.header("Authorization"));
    await fn(req, res, userId);
};

app.post(
    "/admin/auth/login",
    performRequest(async (req, res) => {
      const { email, password } = req.body;
      const token = await login(email, password);
      return res.json({ token });
    })
  );
  

app.post(
    "/admin/auth/register",
    performRequest(async (req, res) => {
        const { email, password, name } = req.body;
        const token = await register(email, password, name);
        return res.json({ token });
    })
);

app.post(
    "/admin/auth/logout",
    performRequest(
        authed(async (req, res, email) => {
          _c27‍.g.console.log("Server logout", email);
          await logout(email);
          return res.json({});
        })
    )
);

/***************************************************************
                    Deck Functions
***************************************************************/

app.get(
    "/decks",
    performRequest(
      authed(async (req, res, authUserId) => {
        const decks = await getDecks(authUserId);
        return res.json({ decks });
      })
    )
  );

app.put(
    "/decks",
    performRequest(
        authed(async (req, res, authUserId) => {
          await setDecks(authUserId, req.body.decks);
          return res.json({});
        })
    )
);

app.post(
  "/create/deck",
  performRequest(
      authed(async (req, res, authUserId) => {
        await createDeck(authUserId, req.body.title);
        return res.json({});
      })
  )
);

app.delete(
  "/delete/deck",
  performRequest(
    authed(async (req, res, authUserId) => {
      const { deckId } = req.query;
      deleteDeck(authUserId, deckId);
      return res.json({});
    })
  )
);

/***************************************************************
                    Card Functions
***************************************************************/

app.get(
  "/cards",
  performRequest(
    authed(async (req, res, authUserId) => {
      const deckId = req.query.deckId;
      const cards = await getCards(authUserId, deckId);
      return res.json({ cards });
    })
  )
);

app.get(
  "/card",
  performRequest(
    authed(async (req, res, authUserId) => {
      const cardId = req.query.cardId;
      const card = await getCard(authUserId, cardId);
      return res.json({ card });
    })
  )
);

app.post(
  "/create/card",
  performRequest(
      authed(async (req, res, authUserId) => {
        await createCard(authUserId, req.body);
        return res.json({});
      })
  )
);

app.put(
  "/update/card",
  performRequest(
      authed(async (req, res, authUserId) => {
        updateCard(authUserId, req.body);
        return res.json({});
      })
  )
);

app.delete(
  "/delete/card",
  performRequest(
    authed(async (req, res, authUserId) => {
      const { cardId } = req.query;
      deleteCard(authUserId, cardId);
      return res.json({});
    })
  )
);

/***************************************************************
                    User Functions
***************************************************************/


app.get(
  "/user",
  performRequest(
    authed(async (req, res, authUserId) => {
      await userGet(authUserId)
      .then(data => {
        res.json(data); // Respond to the client with the data
      })
      .catch(data => {
        _c27‍.g.console.error(data);
        data.status(500).json({ error: "An error occurred while fetching user data." });
      })
  }
)));

/***************************************************************
                       Running Server
***************************************************************/

app.get("/api", (req, res) => {
    res.json({"users": ["jason", "jayden", "goran", "vahin"]})
})

const PORT = 5005
app.listen(PORT, () => {
    console.log(`Server started on port ${PORT}`)
})